# beacon_chain
# Copyright (c) 2020-2023 Status Research & Development GmbH
# Licensed and distributed under either of
#   * MIT license (license terms in the root directory or at https://opensource.org/licenses/MIT).
#   * Apache v2 license (license terms in the root directory or at https://www.apache.org/licenses/LICENSE-2.0).
# at your option. This file may not be copied, modified, or distributed except according to those terms.

name: CI
on:
  push:
    paths-ignore: ['media/**', 'docs/**', '**/*.md']
    branches:
      - stable
      - testing
      - unstable
  pull_request:
    paths-ignore: ['media/**', 'docs/**', '**/*.md']
  workflow_dispatch:

concurrency: # Cancel stale PR builds (but not push builds)
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: linux
            cpu: amd64
          - os: macos
            cpu: amd64
          - os: windows
            cpu: amd64
        branch: [version-1-6]
        include:
          - target:
              os: linux
            builder: ubuntu-20.04
            shell: bash
          - target:
              os: macos
            builder: macos-11
            shell: bash
          - target:
              os: windows
            builder: windows-2019
            shell: msys2 {0}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }} (Nim ${{ matrix.branch }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # In PR, has extra merge commit: ^1 = PR, ^2 = base
          # submodules: true  # Fails on nimyaml tests

      - name: Check copyright year (Linux)
        if: github.event_name == 'pull_request' && runner.os == 'Linux'
        run: |
          excluded_extensions="ans|json|md|png|txt"

          current_year=$(date +"%Y")
          outdated_files=()
          while read -r file; do
            if ! grep -qE 'Copyright \(c\) .*'$current_year' Status Research & Development GmbH' "$file"; then
              outdated_files+=("$file")
            fi
          done < <(git diff --name-only --diff-filter=AM --ignore-submodules HEAD^ HEAD | grep -vE '\.('$excluded_extensions')$' || true)

          if (( ${#outdated_files[@]} )); then
            echo "The following files do not have an up-to-date copyright year:"
            for file in "${outdated_files[@]}"; do
              echo "- $file"
            done
            exit 2
          fi

      - name: MSYS2 (Windows amd64)
        if: runner.os == 'Windows' && matrix.target.cpu == 'amd64'
        uses: msys2/setup-msys2@v2
        with:
          path-type: inherit
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake

      - name: Derive environment variables
        run: |
          if [[ '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            PLATFORM=x64
          else
            PLATFORM=x86
          fi
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

          # Stack usage test and UBSAN on recent enough gcc:
          if [[ '${{ runner.os }}' == 'Linux' && '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            if [[ '${{ github.sha }}' =~ ^7 ]]; then
              export NIMFLAGS="${NIMFLAGS} -d:limitStackUsage --passC:-fsanitize=undefined --passL:-fsanitize=undefined"
            else
              export NIMFLAGS="${NIMFLAGS} -d:limitStackUsage"
            fi
            echo "NIMFLAGS=${NIMFLAGS}" >> $GITHUB_ENV
          fi

          ncpu=""
          make_cmd="make"
          case '${{ runner.os }}' in
          'Linux')
            ncpu=$(nproc)
            nim --version
            ;;
          'macOS')
            ncpu=$(sysctl -n hw.ncpu)
            ;;
          'Windows')
            ncpu=${NUMBER_OF_PROCESSORS}
            make_cmd="mingw32-make"
            echo "Number of cores: ${NUMBER_OF_PROCESSORS}"
            echo "Physical memory: $(wmic ComputerSystem get TotalPhysicalMemory)"
            echo "Partition sizes: $(wmic partition get name,size,type)"
            ;;
          esac
          [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
          echo "ncpu=${ncpu}" >> $GITHUB_ENV
          echo "make_cmd=${make_cmd}" >> $GITHUB_ENV

      - name: Build Nim and Nimbus dependencies
        run: |
          ${make_cmd} -j ${ncpu} NIM_COMMIT=${{ matrix.branch }} ARCH_OVERRIDE=${PLATFORM} QUICK_AND_DIRTY_COMPILER=1 update
          ./env.sh nim --version

      - name: Get latest fixtures commit hash
        id: fixtures_version
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          fixturesHash=$(getHash status-im/nim-eth2-scenarios)
          echo "::set-output name=fixtures::${fixturesHash}"

      - name: Build binaries (with trace logging enabled)
        run: |
          nim --version
          ${make_cmd} -j ${ncpu} V=1 NIM_COMMIT=${{ matrix.branch }} LOG_LEVEL=TRACE NIMFLAGS="-u:release --opt:none"
          # The Windows image runs out of disk space, so make some room
          rm -rf build nimcache

  # https://github.com/EnricoMi/publish-unit-test-result-action
  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Event File
        path: ${{ github.event_path }}
